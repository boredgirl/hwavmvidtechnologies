@namespace Oqtane.ChatHubs
@inherits ModuleBase
@implements IDisposable
@inject ChatHubService ChatHubService

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Oqtane.ChatHubs.Services
@using Oqtane.ChatHubs.Models

<AuthorizeView>
    <Authorizing>

        <text>loading chart..</text>

    </Authorizing>
    <Authorized>

        @if (ChatHubService.Connection != null && ChatHubService.Connection.State == HubConnectionState.Connected && ChatHubService.Display.Items != null)
        {
            <div class="p-2 p-xl-4 bg-white w-100 mb-0 mb-sm-2 border border-primary">
                <div class="p-0 p-sm-1">

                    <div class="accordion accordion-flush" id="accordionFlushExample">
                      <div class="accordion-item">
                        <h2 class="accordion-header" id="flush-headingOne">
                          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                            Last 24 hours visitors display
                          </button>
                        </h2>
                        <div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
                          <div class="accordion-body">
                              
                              <div class="d-flex flex-nowrap bd-highlight">

                                @foreach (var list in ChatHubService.Display.Items)
                                {
                                    <div>

                                        <button class="btn btn-primary btn-lg p-5" type="button" disabled>

                                            <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>   
                                            at @list.FirstOrDefault().Value.CreatedOn.ToString("hh tt") @list.Count() visitors

                                        </button>

                                    </div>
                                }

                            </div>

                          </div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header" id="flush-headingTwo">
                          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
                            Accordion Item #2
                          </button>
                        </h2>
                        <div id="flush-collapseTwo" class="accordion-collapse collapse" aria-labelledby="flush-headingTwo" data-bs-parent="#accordionFlushExample">
                          <div class="accordion-body">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the second item's accordion body. Let's imagine this being filled with some actual content.</div>
                        </div>
                      </div>
                      <div class="accordion-item">
                        <h2 class="accordion-header" id="flush-headingThree">
                          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseThree" aria-expanded="false" aria-controls="flush-collapseThree">
                            Accordion Item #3
                          </button>
                        </h2>
                        <div id="flush-collapseThree" class="accordion-collapse collapse" aria-labelledby="flush-headingThree" data-bs-parent="#accordionFlushExample">
                          <div class="accordion-body">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.</div>
                        </div>
                      </div>
                    </div>

                </div>
            </div>
        }

    </Authorized>
</AuthorizeView>

@code {

    protected override void OnInitialized()
    {
        this.ChatHubService.OnUpdateUI += (object sender, EventArgs e) => UpdateUI(sender, e);
        base.OnInitialized();
    }

    public void UpdateUI(object sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public void Dispose()
    {
        this.ChatHubService.OnUpdateUI -= (object sender, EventArgs e) => UpdateUI(sender, e);
    }
}
