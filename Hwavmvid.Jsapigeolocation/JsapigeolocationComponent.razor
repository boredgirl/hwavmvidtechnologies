@namespace Hwavmvid.Jsapigeolocation
@inherits ComponentBase
@implements IAsyncDisposable
@inject Jsapigeolocationservice Jsapigeolocationservice

@using System.Linq
@using System.Collections.Generic

<!--
<script src="https://maps.googleapis.com/maps/api/js?sensor=true"></script>
-->

<div>

    @{
        var contextmap = Jsapigeolocationservice.Getmap(ComponentId);
    }

    @if (contextmap != null && contextmap.Item != null && contextmap.Item.latitude != null && contextmap.Item.longitude != null)
    {
        <div class="lead"><small>latitude: @contextmap.Item.latitude</small></div>
        <div class="lead"><small>longitude: @contextmap.Item.longitude</small></div>
    }
    
</div>

<div id="@geolocationcanvasid"></div>

@code {

    public string ComponentId { get; set; } = Guid.NewGuid().ToString().Replace("-", "_");
    public string permissionstate { get; set; } = string.Empty;
    public string geolocationcanvasid { get; set; }

    protected override Task OnInitializedAsync()
    {
        this.Jsapigeolocationservice.OnGeolocationpermisssionsChanged += Geolocationpermissionschanged;
        this.Jsapigeolocationservice.OnUpdateUI += UpdateUI;

        this.geolocationcanvasid = string.Concat("geolocationcanvasid", "-", this.ComponentId);
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.Jsapigeolocationservice.Initgeolocationservice();
            await this.Jsapigeolocationservice.InitGeolocationMap(this.ComponentId, this.geolocationcanvasid);
            await this.Jsapigeolocationservice.Getgeolocationpermissions(this.ComponentId);
            await this.Jsapigeolocationservice.Getgeolocation(this.ComponentId);
            //await this.Jsapigeolocationservice.Rendergooglemapposition(this.Jsapigeolocationservice.item.latitude, this.Jsapigeolocationservice.item.longitude);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Geolocationpermissionschanged(Jsapigeolocationpermissionsevent e)
    {
        this.permissionstate = e.Permissionsstate;
    }

    public void UpdateUI()
    {
        InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        this.Jsapigeolocationservice.OnGeolocationpermisssionsChanged -= Geolocationpermissionschanged;
        this.Jsapigeolocationservice.OnUpdateUI -= UpdateUI;

        foreach (var item in this.Jsapigeolocationservice.Mapitems.ToList())
        {
            if (item.Jsmapreference != null)
                await item.Jsmapreference.DisposeAsync();
        }
        this.Jsapigeolocationservice.Mapitems.Clear();
    }
}
